(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{950:function(t,a,e){"use strict";e.r(a);var s=e(1),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("今天看到几道有关加号的题目，觉得很怪异如下")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '[object Object]'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ''")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("p",[t._v("当时我就完全没有搞懂，所以决定探索一下 "),e("code",[t._v("JavaScript")]),t._v(" 中的 "),e("code",[t._v("+")]),t._v(" 号运算符，另外，对于 "),e("code",[t._v("toString")]),t._v(" 和 "),e("code",[t._v("valueOf")]),t._v(" 这两个方法一直搞不清会调用哪个，在探索 "),e("code",[t._v("+")]),t._v(" 号运算符的过程中也一并搞懂了，我将会在下面仔细讲解。")]),t._v(" "),e("h2",{attrs:{id:"一元运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一元运算符"}},[t._v("#")]),t._v(" 一元运算符")]),t._v(" "),e("p",[e("code",[t._v("+")]),t._v(" 既可以作为一元运算符，也可以作为二元运算符，首先我们先讲解较简单的一元运算符，如下表：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("类型")]),t._v(" "),e("th",[t._v("转换规则")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("undefiend")])]),t._v(" "),e("td",[e("code",[t._v("NaN")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("null")])]),t._v(" "),e("td",[e("code",[t._v("0")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("boolean")])]),t._v(" "),e("td",[e("code",[t._v("true => 1")]),e("br"),e("code",[t._v("false => 0")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("number")])]),t._v(" "),e("td",[t._v("原样返回，如 "),e("code",[t._v("+1 => 1")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("string")])]),t._v(" "),e("td",[t._v("1. 如果字符串为纯数字组成，如 "),e("code",[t._v('"5678" => 5678')]),e("br"),t._v("2. 如果不为纯数字，那么返回 "),e("code",[t._v("NaN")]),e("br"),t._v("3. 空字符串会被转化为 "),e("code",[t._v("0")]),t._v("，即 "),e("code",[t._v('"" => 0')])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("symbol")])]),t._v(" "),e("td",[t._v("抛出 "),e("code",[t._v("TypeError")]),t._v(" 异常")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("object")])]),t._v(" "),e("td",[t._v("分为两步："),e("br"),t._v("1. 先进行 "),e("code",[t._v("toPrimitive")]),t._v(" 转化为基本数据类型，得到返回值 "),e("code",[t._v("ret")]),e("br"),t._v("2. 然后对 "),e("code",[t._v("ret")]),t._v(" 进行上面描述过程的转换，例如如果返回 "),e("code",[t._v("true")]),t._v("，得到 "),e("code",[t._v("1")])])])])]),t._v(" "),e("p",[t._v("下表是 "),e("code",[t._v("ECMAScript")]),t._v(" 中的规范，上面的内容来自这里：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Argument")]),t._v(" "),e("th",[t._v("Result")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("Undefined")])]),t._v(" "),e("td",[e("code",[t._v("NaN")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Null")])]),t._v(" "),e("td",[e("code",[t._v("+0")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Boolean")])]),t._v(" "),e("td",[e("code",[t._v("The result is 1 if the argument is true.")]),t._v(" "),e("br"),e("code",[t._v("The result is +0 if the argument is false.")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Number")])]),t._v(" "),e("td",[e("code",[t._v("The result equals the input argument (no conversion).")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("String")])]),t._v(" "),e("td",[e("code",[t._v("See grammar and note below.")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Object")])]),t._v(" "),e("td",[e("code",[t._v("Apply the following steps:")]),e("br"),e("code",[t._v("1. Let primValue be ToPrimitive(input argument, hint Number).")]),e("br"),e("code",[t._v("2. Return ToNumber(primValue).")])])])])]),t._v(" "),e("p",[t._v("下面来看几个例子，来验证上面的内容")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Uncaught TypeError: Cannot convert a Symbol value to a number")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 123")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1aa1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("对于对象首先要进行 "),e("code",[t._v("toPrimitive")]),t._v(" 转化为原始类型，然后将原始类型转化为数字")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("obj1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("obj2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("对于空对象，在转化为原始值时得到的是 "),e("code",[t._v('"[object Object]"')]),t._v("，将它转化为数字时，这个字符串不是纯数字，所以会被转化为 "),e("code",[t._v("NaN")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"二元运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二元运算符"}},[t._v("#")]),t._v(" 二元运算符")]),t._v(" "),e("p",[t._v("当把 "),e("code",[t._v("+")]),t._v(" 作为二元运算符时，遵循以下过程：")]),t._v(" "),e("ol",[e("li",[t._v("Let "),e("em",[t._v("lref")]),t._v(" be the result of evaluating "),e("em",[t._v("AdditiveExpression")]),t._v(".")]),t._v(" "),e("li",[t._v("Let "),e("em",[t._v("lval")]),t._v(" be "),e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-getvalue",target:"_blank",rel:"noopener noreferrer"}},[t._v("GetValue"),e("OutboundLink")],1),t._v("("),e("em",[t._v("lref")]),t._v(").")]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-returnifabrupt",target:"_blank",rel:"noopener noreferrer"}},[t._v("ReturnIfAbrupt"),e("OutboundLink")],1),t._v("("),e("em",[t._v("lval")]),t._v(").")]),t._v(" "),e("li",[t._v("Let "),e("em",[t._v("rref")]),t._v(" be the result of evaluating "),e("em",[t._v("MultiplicativeExpression")]),t._v(".")]),t._v(" "),e("li",[t._v("Let "),e("em",[t._v("rval")]),t._v(" be "),e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-getvalue",target:"_blank",rel:"noopener noreferrer"}},[t._v("GetValue"),e("OutboundLink")],1),t._v("("),e("em",[t._v("rref")]),t._v(").")]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-returnifabrupt",target:"_blank",rel:"noopener noreferrer"}},[t._v("ReturnIfAbrupt"),e("OutboundLink")],1),t._v("("),e("em",[t._v("rval")]),t._v(").")]),t._v(" "),e("li",[t._v("Let "),e("em",[t._v("lprim")]),t._v(" be "),e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive",target:"_blank",rel:"noopener noreferrer"}},[t._v("ToPrimitive"),e("OutboundLink")],1),t._v("("),e("em",[t._v("lval")]),t._v(").")]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-returnifabrupt",target:"_blank",rel:"noopener noreferrer"}},[t._v("ReturnIfAbrupt"),e("OutboundLink")],1),t._v("("),e("em",[t._v("lprim")]),t._v(").")]),t._v(" "),e("li",[t._v("Let "),e("em",[t._v("rprim")]),t._v(" be "),e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive",target:"_blank",rel:"noopener noreferrer"}},[t._v("ToPrimitive"),e("OutboundLink")],1),t._v("("),e("em",[t._v("rval")]),t._v(").")]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-returnifabrupt",target:"_blank",rel:"noopener noreferrer"}},[t._v("ReturnIfAbrupt"),e("OutboundLink")],1),t._v("("),e("em",[t._v("rprim")]),t._v(").")]),t._v(" "),e("li",[t._v("If "),e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-data-types-and-values",target:"_blank",rel:"noopener noreferrer"}},[t._v("Type"),e("OutboundLink")],1),t._v("("),e("em",[t._v("lprim")]),t._v(") is String or "),e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-data-types-and-values",target:"_blank",rel:"noopener noreferrer"}},[t._v("Type"),e("OutboundLink")],1),t._v("("),e("em",[t._v("rprim")]),t._v(") is String, then\n"),e("ol",[e("li",[t._v("Let "),e("em",[t._v("lstr")]),t._v(" be "),e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-tostring",target:"_blank",rel:"noopener noreferrer"}},[t._v("ToString"),e("OutboundLink")],1),t._v("("),e("em",[t._v("lprim")]),t._v(").")]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-returnifabrupt",target:"_blank",rel:"noopener noreferrer"}},[t._v("ReturnIfAbrupt"),e("OutboundLink")],1),t._v("("),e("em",[t._v("lstr")]),t._v(").")]),t._v(" "),e("li",[t._v("Let "),e("em",[t._v("rstr")]),t._v(" be "),e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-tostring",target:"_blank",rel:"noopener noreferrer"}},[t._v("ToString"),e("OutboundLink")],1),t._v("("),e("em",[t._v("rprim")]),t._v(").")]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-returnifabrupt",target:"_blank",rel:"noopener noreferrer"}},[t._v("ReturnIfAbrupt"),e("OutboundLink")],1),t._v("("),e("em",[t._v("rstr")]),t._v(").")]),t._v(" "),e("li",[t._v("Return the String that is the result of concatenating "),e("em",[t._v("lstr")]),t._v(" and "),e("em",[t._v("rstr.")])])])]),t._v(" "),e("li",[t._v("Let "),e("em",[t._v("lnum")]),t._v(" be "),e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber",target:"_blank",rel:"noopener noreferrer"}},[t._v("ToNumber"),e("OutboundLink")],1),t._v("("),e("em",[t._v("lprim")]),t._v(").")]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-returnifabrupt",target:"_blank",rel:"noopener noreferrer"}},[t._v("ReturnIfAbrupt"),e("OutboundLink")],1),t._v("("),e("em",[t._v("lnum")]),t._v(").")]),t._v(" "),e("li",[t._v("Let "),e("em",[t._v("rnum")]),t._v(" be "),e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber",target:"_blank",rel:"noopener noreferrer"}},[t._v("ToNumber"),e("OutboundLink")],1),t._v("("),e("em",[t._v("rprim")]),t._v(").")]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-returnifabrupt",target:"_blank",rel:"noopener noreferrer"}},[t._v("ReturnIfAbrupt"),e("OutboundLink")],1),t._v("("),e("em",[t._v("rnum")]),t._v(").")]),t._v(" "),e("li",[t._v("Return the result of applying the addition operation to "),e("em",[t._v("lnum")]),t._v(" and "),e("em",[t._v("rnum")]),t._v(". See the Note below "),e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-applying-the-additive-operators-to-numbers",target:"_blank",rel:"noopener noreferrer"}},[t._v("12.7.5"),e("OutboundLink")],1),t._v(".")])]),t._v(" "),e("p",[t._v("上面是 "),e("code",[t._v("ECMAScript")]),t._v(" 中的规范，如果英文不太熟的话，下面我将以中文简单翻译如下：")]),t._v(" "),e("ol",[e("li",[t._v("首先将 "),e("code",[t._v("+")]),t._v(" 号两边的值通过 "),e("code",[t._v("toPrimitive")]),t._v(" 转化为基本数据类型(如果已经是基本数据类型，则原样返回)")]),t._v(" "),e("li",[t._v("如果得到的两个基本数据类型中有字符串，那么将二者转化为字符串拼接起来，将结果返回")]),t._v(" "),e("li",[t._v("如果两个基本数据类型中没有字符串，那么就将两个值转化为数字，然后进行相加")])]),t._v(" "),e("p",[t._v("下面来看几个例子：")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两个值中有一个为字符串，则调用二者的 toString 方法，然后进行相加")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "2"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "trueabc"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两个值中没有字符串，那么转化为数字然后相加")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 2 + 1 = 3")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 0 + 2 = 2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "" + 2 = "2"')]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("对于对象要转化为原始类型，然后进行相加，那么对象转化为原始类型的过程是什么? 下面是调用的过程：")]),t._v(" "),e("ul",[e("li",[t._v("如果有 "),e("code",[t._v("[Symbol.toPrimitive]")]),t._v(" 方法，则调用 "),e("code",[t._v("[Symbol.toPrimitive]()")]),t._v(" 方法转化为原始类型，该方法的返回必须为原始类型")]),t._v(" "),e("li",[t._v("如果没有 "),e("code",[t._v("[Symbol.toPrimitive]")]),t._v(" 方法，那么调用 "),e("code",[t._v("valueOf")]),t._v(" 方法，如果 "),e("code",[t._v("valueOf")]),t._v(" 返回的不是原始值(基本数据类型)，那么就调用 "),e("code",[t._v("toString")]),t._v(" 方法，如果 "),e("code",[t._v("toString")]),t._v(" 返回的也不是原始值，那么就会报错")])]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "" + 2 = "2"')]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("数组也是对象，因为数组没有 "),e("code",[t._v("[Symbol.toPrimitive]")]),t._v(" 方法，所以首先会调用数组的 "),e("code",[t._v("valueOf")]),t._v(" 方法，因为数组的 "),e("code",[t._v("valueOf")]),t._v(" 方法返回的是数组本身，并不是基本数据类型，所以接着会调用数组的 "),e("code",[t._v("toString")]),t._v(" 方法，得到一个空字符串 "),e("code",[t._v('""')]),t._v(" ，通过我们上面的讲解，如果两个值中有一个是字符串的话，则会将二者转化为字符串进行拼接，所以 "),e("code",[t._v('[] + 2 => "" + 2 = "2"')]),t._v("。下面在来看一个例子：")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("hint")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 22")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])]),e("p",[t._v("由于对象 "),e("code",[t._v("obj")]),t._v(" 有 "),e("code",[t._v("[Symbol.toPrimitive]")]),t._v(" 方法，所以在转化为基本数据类型时会调用该方法，得到的值为 "),e("code",[t._v("20")]),t._v("，所以 "),e("code",[t._v("2 + obj => 2 + 20 = 22")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"题目讲解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#题目讲解"}},[t._v("#")]),t._v(" 题目讲解")]),t._v(" "),e("p",[t._v("回到开头我们提出的几个例子：")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '[object Object]'")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("首先看 "),e("code",[t._v("[] + {}")]),t._v("，首先将两个东西转化为基本数据类型，因为它们都没有 "),e("code",[t._v("[Symbol.toPrimitive]")]),t._v(" 方法，所以接着会调用它们的 "),e("code",[t._v("valueOf")]),t._v(" 方法，但是它们的 "),e("code",[t._v("valueOf")]),t._v(" 方法返回的都是它们本身，所以接着会调用它们的 "),e("code",[t._v("toString")]),t._v(" 方法，"),e("code",[t._v("[]")]),t._v(" 的 "),e("code",[t._v("toString")]),t._v(" 方法得到的是 "),e("code",[t._v("''")]),t._v(" 空字符串，"),e("code",[t._v("{}")]),t._v(" 的 "),e("code",[t._v("toString")]),t._v(" 方法得到的是 "),e("code",[t._v("'[object Object]'")]),t._v("，二者都是字符串，将二者进行拼接，得到的结果是 "),e("code",[t._v("'[object Object]'")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ''")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("接着看 "),e("code",[t._v("[] + []")]),t._v("，有上题的经验，"),e("code",[t._v("[] => ''")]),t._v("，两个空字符串进行拼接得到的结果是 "),e("code",[t._v("''")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("接着看 "),e("code",[t._v("{} + []")]),t._v("，因为 "),e("code",[t._v("JavaScript")]),t._v(" 会将以 "),e("code",[t._v("{")]),t._v(" 开头的语句解析为代码块而不是一个空对象，所以 "),e("code",[t._v("{} + []")]),t._v(" 相当于 "),e("code",[t._v("+[]")]),t._v("，这时的 "),e("code",[t._v("+")]),t._v(" 相当于是一个一元运算符，根据一元运算符上面讲解的内容，首先将 "),e("code",[t._v("[]")]),t._v(" 转化为基本数据类型，得到 "),e("code",[t._v('""')]),t._v("，接着将 "),e("code",[t._v('""')]),t._v(" 转化为数字，得到的结果为 "),e("code",[t._v("0")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("根据上一道题的讲解，"),e("code",[t._v("{} + {}")]),t._v(" 相当于 "),e("code",[t._v("+{}")]),t._v("，"),e("code",[t._v("{}")]),t._v(" 转换为基本数据类型得到的是 "),e("code",[t._v('"[object Object]"')]),t._v("，该字符串转换为数字得到的 "),e("code",[t._v("NaN")]),t._v("，所以结果是 "),e("code",[t._v("NaN")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("code",[t._v("[] + {}")]),t._v(" 得到的结果是 "),e("code",[t._v("'[object Object]'")]),t._v("，"),e("code",[t._v("{} + []")]),t._v(" 得到的结果并不是 "),e("code",[t._v("0")]),t._v("，因为这时 "),e("code",[t._v("{}")]),t._v(" 并不是在语句的开头，会被看做是空对象，所以 "),e("code",[t._v("{} + []")]),t._v(" 得到的结果也是 "),e("code",[t._v("'[object Object]'")]),t._v("，二者是相等的，结果是 "),e("code",[t._v("true")])]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("code",[t._v("{} + []")]),t._v(" 因为在开头，得到的结果是 "),e("code",[t._v("0")]),t._v("，而 "),e("code",[t._v("[] + {}")]),t._v(" 的结果是 "),e("code",[t._v("[object Object]")]),t._v("，二者不相等，所以 "),e("code",[t._v("{} + [] != [] + {}")]),t._v(" 的结果也是 "),e("code",[t._v("true")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"参考文献"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.cnblogs.com/polk6/p/js-adv-addopr.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 加号运算符详解"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://stackoverflow.com/questions/2485632/valueof-vs-tostring-in-javascript",target:"_blank",rel:"noopener noreferrer"}},[t._v("valueOf() vs. toString() in Javascript"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-addition-operator-plus-runtime-semantics-evaluation",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Addition operator ( + )"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.ecma-international.org/ecma-262/5.1/#sec-9.3",target:"_blank",rel:"noopener noreferrer"}},[t._v("ToNumber"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000016325587",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript7规范中的ToPrimitive抽象操作"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://javascript.info/object-toprimitive",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object to primitive conversion"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/74982324",target:"_blank",rel:"noopener noreferrer"}},[t._v("Symbol.toPrimitive 与 [] + {} == {} + []"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);