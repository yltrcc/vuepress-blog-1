(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{1076:function(E,v,B){"use strict";B.r(v);var _=B(1),r=Object(_.a)({},(function(){var E=this,v=E.$createElement,B=E._self._c||v;return B("ContentSlotsDistributor",{attrs:{"slot-key":E.$parent.slotKey}},[B("p",[E._v("欢迎阅读我的图论系列文章，我们将从下面的一系列文章来了解图论的相关知识。")]),E._v(" "),B("hr"),E._v(" "),B("p",[E._v("在学习具体的图论算法之前，我们首先要学习如何表示一幅图，对于一幅图的表示我们可以使用邻接矩阵，也可以使用邻接表，对于一幅稀疏图来说，使用邻接表可以省下更多的空间...")]),E._v(" "),B("p",[E._v("下面这篇文章是学习其他文章的基础，请务必认为学习，虽然基础，但是简单。")]),E._v(" "),B("ul",[B("li",[B("a",{attrs:{href:"/vuepress-blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA"}},[E._v("图的表示")])])]),E._v(" "),B("hr"),E._v(" "),B("p",[E._v("学习完如何表示图以后，接下来我们需要了解如何遍历图，图的遍历分为两种")]),E._v(" "),B("ul",[B("li",[E._v("深度优先遍历")]),E._v(" "),B("li",[E._v("广度优先遍历")])]),E._v(" "),B("p",[E._v("这两种遍历算法覆盖有关图论面试 80% 的问题，所以需要好好学习。")]),E._v(" "),B("ul",[B("li",[B("a",{attrs:{href:"/vuepress-blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86"}},[E._v("图的深度优先遍历")])]),E._v(" "),B("li",[B("a",{attrs:{href:"/vuepress-blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE%E7%9A%84%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86"}},[E._v("图的广度优先遍历")])])]),E._v(" "),B("hr"),E._v(" "),B("p",[E._v("在实际的问题中，很多的问题都可以建模为图论的问题，然后使用图论的相关算法进行解决，在下面的这边文章中，就具体的讲解了如何将问题建模为图论问题，然后解决问题的。")]),E._v(" "),B("ul",[B("li",[B("a",{attrs:{href:"/vuepress-blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE%E8%AE%BA%E5%BB%BA%E6%A8%A1"}},[E._v("图论建模")])])]),E._v(" "),B("hr"),E._v(" "),B("p",[E._v("下面我们继续学习有关图的两个概念，桥和割点：")]),E._v(" "),B("ul",[B("li",[E._v("桥就是图中最脆弱的那条边")]),E._v(" "),B("li",[E._v("割点就是图中最脆弱的那个节点")])]),E._v(" "),B("p",[E._v("下面这篇文章就讲解了如何寻找图中的桥和割点。")]),E._v(" "),B("ul",[B("li",[B("a",{attrs:{href:"/vuepress-blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A1%A5%E5%92%8C%E5%89%B2%E7%82%B9"}},[E._v("桥和割点")])])]),E._v(" "),B("hr"),E._v(" "),B("p",[E._v("图中的回路也是十分有趣的东西，下面我们就介绍了两种有名的回路：")]),E._v(" "),B("ul",[B("li",[E._v("哈密尔顿回路：经过所有节点有且仅有一次，然后回到原点")]),E._v(" "),B("li",[E._v("欧拉回路：经过所有的边有且仅有一次，然后回到原点")])]),E._v(" "),B("p",[E._v("下面的两篇文章就具体讲解了如何寻找哈密尔顿回路与欧拉回路，并且在学习欧拉回路的过程中，能体验到数学之美")]),E._v(" "),B("ul",[B("li",[B("a",{attrs:{href:"/vuepress-blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%AF%86%E5%B0%94%E9%A1%BF%E5%9B%9E%E8%B7%AF"}},[E._v("哈密尔顿回路")])]),E._v(" "),B("li",[B("a",{attrs:{href:"/vuepress-blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF"}},[E._v("欧拉回路")])])]),E._v(" "),B("hr"),E._v(" "),B("p",[E._v("学习图的最小生成树，我们能知道如何以最小的代价将图中所有的节点连接起来")]),E._v(" "),B("ul",[B("li",[B("a",{attrs:{href:"/vuepress-blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91"}},[E._v("最小生成树")])])]),E._v(" "),B("hr"),E._v(" "),B("p",[E._v("在很多的问题中，我们对节点与节点之间的最短路径是多少十分的感兴趣，下面这篇文章介绍了三种方法寻找节点之间的最短路径")]),E._v(" "),B("ul",[B("li",[B("a",{attrs:{href:"/vuepress-blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95"}},[E._v("最短路径算法")])])]),E._v(" "),B("hr"),E._v(" "),B("p",[E._v("生活中的很多问题可以建模为有向图的问题，例如程序模块之间的依赖，课程的学习顺序，下面我们继续有关有向图的相关算法")]),E._v(" "),B("ul",[B("li",[B("a",{attrs:{href:"/vuepress-blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9C%89%E5%90%91%E5%9B%BE%E7%AE%97%E6%B3%95"}},[E._v("有向图算法")])])]),E._v(" "),B("hr"),E._v(" "),B("p",[E._v("网络流的提出解决一个系统最多能够承受多大的流量，这个是最大流问题，通过这篇文章的学习，你会发现网络流的应用不止于此")]),E._v(" "),B("ul",[B("li",[B("a",{attrs:{href:"/vuepress-blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BD%91%E7%BB%9C%E6%B5%81%E4%B8%8E%E6%9C%80%E5%A4%A7%E6%B5%81"}},[E._v("网络流与最大流")])])]),E._v(" "),B("hr"),E._v(" "),B("p",[E._v("下面是本系列的最后一篇文章，匹配问题，例如男女之间的相亲，如果你对这个问题感兴趣的话，希望仔细阅读下面的这篇文章")]),E._v(" "),B("ul",[B("li",[B("a",{attrs:{href:"/vuepress-blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98"}},[E._v("匹配问题")])])])])}),[],!1,null,null,null);v.default=r.exports}}]);